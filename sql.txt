-- 1aCREATE SCHEMA IF NOT EXISTS LibraryManagement;USE LibraryManagement;-- 1bCREATE TABLE authors (    author_id INT AUTO_INCREMENT PRIMARY KEY,    author_name VARCHAR(45));-- 1cCREATE TABLE genres (    genre_id INT AUTO_INCREMENT PRIMARY KEY,    genre_name VARCHAR(45));-- 1dCREATE TABLE books (    book_id INT AUTO_INCREMENT PRIMARY KEY,    title VARCHAR(45),    publication_year YEAR,    author_id INT,    genre_id INT,    FOREIGN KEY (author_id)        REFERENCES authors (author_id),    FOREIGN KEY (genre_id)        REFERENCES genres (genre_id));-- 1eCREATE TABLE users (user_id INT AUTO_INCREMENT PRIMARY KEY,username VARCHAR(45),email VARCHAR(45));-- 1fCREATE TABLE borrowed_books (    borrow_id INT AUTO_INCREMENT PRIMARY KEY,    book_id INT,    user_id INT,    borrow_date DATE,    return_date DATE,    FOREIGN KEY (book_id) REFERENCES books (book_id),    FOREIGN KEY (user_id) REFERENCES users (user_id));-- 2INSERT INTO authors(author_name) VALUE('Den Brown'), ('Paolo Koelio');INSERT INTO genres(genre_name) VALUE('Detective'), ('Roman');INSERT INTO books(title, publication_year, author_id, genre_id) VALUE ('Angels and Demons', 2003, 1, 1), ('Alchemic', 2005, 2, 2);INSERT INTO users(username, email) VALUE ('Petro', 'petro@gmail.com'), ('Pavlo', 'pavlo@gmail.com'); INSERT INTO borrowed_books(book_id, user_id, borrow_date, return_date) VALUE (1, 1, '2025-06-26', '2025-07-26'), (2, 2, '2025-06-27', '2025-07-27');use hw4;-- 3SELECT *FROM order_details as odINNER JOIN orders as o ON od.order_id = o.idINNER JOIN products as pr ON od.product_id = pr.idINNER JOIN customers as cu ON o.customer_id = cu.idINNER JOIN employees as em ON o.employee_id = em.employee_idINNER JOIN shippers as sh ON o.shipper_id = sh.idINNER JOIN suppliers as su ON pr.supplier_id = su.idINNER JOIN categories as ca on pr.category_id = ca.id;-- 4.1SELECT COUNT(*) as totalFROM order_details as odINNER JOIN orders as o ON od.order_id = o.idINNER JOIN products as pr ON od.product_id = pr.idINNER JOIN customers as cu ON o.customer_id = cu.idINNER JOIN employees as em ON o.employee_id = em.employee_idINNER JOIN shippers as sh ON o.shipper_id = sh.idINNER JOIN suppliers as su ON pr.supplier_id = su.idINNER JOIN categories as ca on pr.category_id = ca.id;-- 4.2SELECT COUNT(*) as totalFROM order_details as odLEFT JOIN orders as o ON od.order_id = o.idLEFT JOIN products as pr ON od.product_id = pr.idRIGHT JOIN customers as cu ON o.customer_id = cu.idINNER JOIN employees as em ON o.employee_id = em.employee_idINNER JOIN shippers as sh ON o.shipper_id = sh.idINNER JOIN suppliers as su ON pr.supplier_id = su.idINNER JOIN categories as ca on pr.category_id = ca.id;-- 4.3SELECT *FROM order_details as odINNER JOIN orders as o ON od.order_id = o.idINNER JOIN products as pr ON od.product_id = pr.idINNER JOIN customers as cu ON o.customer_id = cu.idINNER JOIN employees as em ON o.employee_id = em.employee_idINNER JOIN shippers as sh ON o.shipper_id = sh.idINNER JOIN suppliers as su ON pr.supplier_id = su.idINNER JOIN categories as ca on pr.category_id = ca.idWHERE em.employee_id > 3 AND em.employee_id <= 10;-- 4.4SELECT ca.name, COUNT(*) AS rows_total, AVG(od.quantity) AS average_quantityFROM order_details as odINNER JOIN orders as o ON od.order_id = o.idINNER JOIN products as pr ON od.product_id = pr.idINNER JOIN customers as cu ON o.customer_id = cu.idINNER JOIN employees as em ON o.employee_id = em.employee_idINNER JOIN shippers as sh ON o.shipper_id = sh.idINNER JOIN suppliers as su ON pr.supplier_id = su.idINNER JOIN categories as ca on pr.category_id = ca.idGROUP BY ca.name;-- 4.5SELECT ca.name, COUNT(*) AS rows_total, AVG(od.quantity) AS average_quantityFROM order_details as odINNER JOIN orders as o ON od.order_id = o.idINNER JOIN products as pr ON od.product_id = pr.idINNER JOIN customers as cu ON o.customer_id = cu.idINNER JOIN employees as em ON o.employee_id = em.employee_idINNER JOIN shippers as sh ON o.shipper_id = sh.idINNER JOIN suppliers as su ON pr.supplier_id = su.idINNER JOIN categories as ca on pr.category_id = ca.idGROUP BY ca.nameHAVING average_quantity > 21;-- 4.6SELECT ca.name, COUNT(*) AS rows_total, AVG(od.quantity) AS average_quantityFROM order_details as odINNER JOIN orders as o ON od.order_id = o.idINNER JOIN products as pr ON od.product_id = pr.idINNER JOIN customers as cu ON o.customer_id = cu.idINNER JOIN employees as em ON o.employee_id = em.employee_idINNER JOIN shippers as sh ON o.shipper_id = sh.idINNER JOIN suppliers as su ON pr.supplier_id = su.idINNER JOIN categories as ca on pr.category_id = ca.idGROUP BY ca.nameHAVING average_quantity > 21ORDER BY rows_total DESC;-- 4.7SELECT ca.name, COUNT(*) AS rows_total, AVG(od.quantity) AS average_quantityFROM order_details as odINNER JOIN orders as o ON od.order_id = o.idINNER JOIN products as pr ON od.product_id = pr.idINNER JOIN customers as cu ON o.customer_id = cu.idINNER JOIN employees as em ON o.employee_id = em.employee_idINNER JOIN shippers as sh ON o.shipper_id = sh.idINNER JOIN suppliers as su ON pr.supplier_id = su.idINNER JOIN categories as ca on pr.category_id = ca.idGROUP BY ca.nameHAVING average_quantity > 21ORDER BY rows_total DESCLIMIT 4OFFSET 1;